<?php
// 
// $Id: ezqdomrenderer.php,v 1.2 2001/05/28 14:18:13 bf Exp $
//
// Definition of eZQDomRenderer class
//
// Bård Farstad <bf@ez.no>
// Created on: <24-Mar-2001 12:54:26 bf>
//
// This source file is part of eZ publish, publishing software.
// Copyright (C) 1999-2001 eZ systems as
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, US
//

//!! eZArticle
//! eZTechRenderer renders XML contents into html articles.
/*!
  This class wil decode the tech articles generated by eZTechGenerator.
  Supported tags:
  \code
  <page> - pagebreak
  <header>
  Header text
  </header>
  <link ez.no text to the link> - anchor
  <iconlink ez.no text to the link> - anchor
  <mail adresse@domain.tld subject line, link text> - anchor to email address with subject
  <image 42 align size> - image tag, 42 is the id, alignment (left|center|right|float), size (small|medium|large|original)

  <ezanchor anchorname>

  <module modulename> - this will include a php file named "modulename.php" if it is found in the
  ezrticle/modules dir.

  <bullet>
  
  </bullet>

  <html>
  html code, this will print out the HTML code..
  </html>
  
  <cpp>
  cpp code
  </cpp>
  
  <php>
  php code
  </php>

  <java>
  java code
  </java>

  <ezhtml>
  html code
  </ezhtml>
  
  <shell>
  shell code
  </shell>
  
  <sql>
  sql code
  </sql>

  <perl>
  perl code
  </perl>

  <lisp>
  lisp code
  </lisp>
  
  <bold>
  bold text

  </bold>

  <italic>
  italic text
  </italic>

  <underline>
  underlined text
  </underline>

  <strike>
  strike text
  </strike>

  <pre>
  predefined text
  </pre>

  <verbatim>
  predefined text
  </verbatim>
  
  \endcode
  \sa eZTechGenerator  
*/

/*!TODO
  Add better syntax highlighting.

*/

include_once( "classes/eztexttool.php" );
include_once( "classes/ezlog.php" );

class eZQDomrenderer
{
    /*!
      Creates a new eZTechGenerator object.
    */
    function eZQDomrenderer( &$article )
    {
        $ini =& INIFile::globalINI();

        $this->Template = new eZTemplate( "ezarticle/user/" . $ini->read_var( "eZArticleMain", "TemplateDir" ),
                     "ezarticle/user/intl/", "en_GB", "articleview.php" );

        $this->Template->set_file( "articletags_tpl", "articletags.tpl"  );

        $this->Template->set_block( "articletags_tpl", "header_1_tpl", "header_1"  );
        $this->Template->set_block( "articletags_tpl", "header_2_tpl", "header_2"  );
        $this->Template->set_block( "articletags_tpl", "header_3_tpl", "header_3"  );
        $this->Template->set_block( "articletags_tpl", "header_4_tpl", "header_4"  );
        $this->Template->set_block( "articletags_tpl", "header_5_tpl", "header_5"  );
        $this->Template->set_block( "articletags_tpl", "header_6_tpl", "header_6"  );
        
        $this->Template->set_block( "articletags_tpl", "bold_tpl", "bold"  );
        $this->Template->set_block( "articletags_tpl", "italic_tpl", "italic"  );
        $this->Template->set_block( "articletags_tpl", "underline_tpl", "underline"  );
        $this->Template->set_block( "articletags_tpl", "strong_tpl", "strong"  );


        
        $this->Article = $article;
    }

    /*!
      Returns the XHTML contents of the introduction of the article.
    */
    function &renderIntro()
    {
        $xml =& qdom_tree( $this->Article->contents() );

        if ( !$xml )
        {
            print( "<br /><b>Error: eZTechRenderer::docodeXML() could not decode XML</b><br />" );
        }
        else
        {
            $intro = "";
            $body = "";

            $articleImages = $this->Article->images();
            $articleID = $this->Article->id();

            $i=0;
            $this->$PrevTag = "";
            foreach ( $xml->children as $child )
            {
                if ( $child->name == "article" )
                {
                    foreach ( $child->children as $article )
                    {
                        if ( $article->name == "intro" )
                        {                           
                            if ( count( $article->children ) > 0 )
                            {
                                foreach ( $article->children as $paragraph )
                                {
                                    $intro = $this->renderPlain( $intro, $paragraph );
                                    $intro = $this->renderStandards( $intro, $paragraph );
                                    
//                                      $intro = $this->renderCode( $intro, $paragraph );
//                                      $intro = $this->renderLink( $intro, $paragraph );
//                                      $intro = $this->renderModule( $intro, $paragraph );
//                                      $intro = $this->renderImage( $intro, $paragraph, $articleImages );
                                    
                                    $this->PrevTag = $paragraph->name;
                                }
                            }
                        }
                    }
                }
            }
                
//            $newArticle = eZTextTool::nl2br( $intro );
                $newArticle = $intro;
        }
        
        return $newArticle;
    }

    /*!
      Returns the XHTML article of the article.
    */
    function &renderPage( $pageNumber=0 )
    {
//        $xml =& qdom_tree( $this->Article->contents() );

        $xml =& xmltree( $this->Article->contents() );

//        $err = qdom_error();
//        if ( $err )
//            print( $err );
        
        if ( !$xml )
        {
            print( "<br /><b>Error: eZTechRenderer::docodeXML() could not decode XML</b><br />" );
        }
        else
        {
            $intro = "";
            $body = "";

            $this->PrevTag = "";
            $articleImages =& $this->Article->images();
            $articleID = $this->Article->id();
            
            foreach ( $xml->children as $child )
            {
                if ( $child->name == "article" )
                {
                    foreach ( $child->children as $article )
                    {
                        if ( $article->name == "intro" )
                        {
                            if ( count( $article->children ) > 0 )
                                foreach ( $article->children as $paragraph )
                                {
                                    $intro .= $this->renderPlain( $paragraph );
                                    $intro .= $this->renderStandards( $paragraph );
                                    
//                                    $intro = $this->renderCode( $intro, $paragraph );
//                                    $intro = $this->renderLink( $intro, $paragraph );
//                                    $intro = $this->renderModule( $intro, $paragraph );
//                                    $intro = $this->renderImage( $intro, $paragraph, $articleImages );
                                    
                                    $this->PrevTag = $paragraph->name;
                                }
                        }
                        
                        if ( $article->name == "body" )
                        {
                            $body = $article->children;
                        }                        
                    }
                }
            }

            $pageArray = array();
            // loop on the pages
            foreach ( $body as $page )
            {
                $pageContent = "";
                $this->$PrevTag = "";
                // loop on the contents of the pages
                if ( count( $page->children ) > 0 )
                foreach ( $page->children as $paragraph )
                {
                    $pageContent .= $this->renderHeader( $paragraph );
                    $pageContent .= $this->renderStandards( $paragraph );
                    $pageContent .= $this->renderPlain( $paragraph );
//                      $pageContent = $this->renderCode( $pageContent, $paragraph );
//                      $pageContent = $this->renderLink( $pageContent, $paragraph );
//                      $pageContent = $this->renderModule( $pageContent, $paragraph );
//                      $pageContent = $this->renderImage( $pageContent, $paragraph, $articleImages );

                    $this->PrevTag = $paragraph->name;
                }

                
                $pageArray[] = $pageContent;
                
            }

            $returnArray = array();
            $bodyContents = "";
            
            if ( $pageNumber == -1 )
            {
                $newArticle = $intro . "\n</p><p>\n";
                if ( count( $pageArray ) > 0 )
                    foreach ( $pageArray as $page )
                    {
                        $bodyContents .= $page;
                    }
            }
            else if ( $pageNumber != 0 )
            {
                $bodyContents = $pageArray[$pageNumber];
            }
            else
            {
                $bodyContents = $pageArray[$pageNumber];
            }
                
        }

        $returnArray[] =& $intro;
        $returnArray[] =& $bodyContents;
        
        return $returnArray;
    }

    function &renderHeader( $paragraph )
    {
        $pageContent = "";
        if ( $paragraph->name == "header" )
        {
            $level = 1;
            if  ( count( $paragraph->attributes ) > 0 )
            foreach ( $paragraph->attributes as $attr )
            {
                switch ( $attr->name )
                {
                    case "level" :
                    {
                       $level = $attr->children[0]->content;
                    }
                    break;
                }
            }

            foreach ( $paragraph->children as $child )
            {
                if ( $child->name == "text" )
                {
                    $content = $child->content;
                }
            }
            
            $level = min( 6, $level );
            $level = max( 1, $level );

            $this->Template->set_var( "contents", $content );
            $pageContent =& $this->Template->parse( "header_" . $level, "header_" . $level. "_tpl" );
        }

        return $pageContent;
    }

    function &renderPlain( $paragraph )
    {
        // ordinary text
        if ( $paragraph->name == "#text" || $paragraph->name == "text" )
        {
            $paragraph_text = $paragraph->content;
            if ( $paragraph_text[0] == "\n" )
            {
                if ( $this->PrevTag != "link" )
                    $paragraph_text[0] = " ";
            }
            $pageContent .= eZTextTool::nl2br( $paragraph_text );
        }
        return $pageContent;
    }
    

    function &renderStandards( $paragraph )
    {
        $pageContent = "";
        switch ( $paragraph->name )
        {
            case "bullet" :
            {
                $tmpContent = "";
                foreach ( $paragraph->children as $child )
                {
                    if ( $child->name == "text" )
                    {
                        $content = $child->content;
                    }
                    else
                    {
                        $content = $this->renderStandards( $child );
                    }

                    $content = trim( $content );
                    $tmpContent .= preg_replace( "#^(.*)$#m", "<li>\\1</li>", $content );
                }
                
                $pageContent .= "<ul>" . $tmpContent . "</ul>";

            } break;

            case "bold" :
            case "italic" :                
            case "underline" :
            case "strong" :
            {
                $tmpContent = "";
                foreach ( $paragraph->children as $child )
                {
                    if ( $child->name == "text" )
                    {                
                        $tmpContent .= $child->content;
                    }
                    else
                    {
                        $tmpContent .= $this->renderStandards( $child );
                    }
                }

                $this->Template->set_var( "contents", $tmpContent );
                switch ( $paragraph->name )
                {
                    case "bold" :
                        $pageContent = $this->Template->parse( "bold", "bold_tpl" );
                        break;
                    case "italic" :
                        $pageContent = $this->Template->parse( "italic", "italic_tpl" );
                        break;
                    case "underline" :
                        $pageContent = $this->Template->parse( "underline", "underline_tpl" );
                    break;
                    case "strong" :
                        $pageContent = $this->Template->parse( "strong", "strong_tpl" );
                    break;
                }
                
            }break;

        }
        
        return $pageContent;
    }    
    
    var $Article;
    var $PrevTag;
    var $Template;
}

?>
